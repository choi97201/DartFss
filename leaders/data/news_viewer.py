# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\kiwoom\codes\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

import pymysql
import pandas as pd
import webbrowser
import datetime

try:
    from html import escape
except ImportError:
    from cgi import escape

class HTMLDelegate(QStyledItemDelegate):
    def __init__(self, parent=None, color=None):
        super(HTMLDelegate, self).__init__(parent)
        self.doc = QTextDocument(self)
        self.color = color

    def paint(self, painter, option, index):
        substring = index.data(Qt.UserRole)
        painter.save()
        options = QStyleOptionViewItem(option)
        self.initStyleOption(options, index)
        res = ""
        color = QColor(self.color)
        if substring:
            substrings = options.text.split(substring)
            res = """<font color="{}">{}</font>""".format(
                color.name(QColor.HexRgb), substring
            ).join(list(map(escape, substrings)))
        else:
            res = escape(options.text)
        self.doc.setHtml(res)

        options.text = ""
        style = (
            QApplication.style()
            if options.widget is None
            else options.widget.style()
        )
        style.drawControl(QStyle.CE_ItemViewItem, options, painter)

        ctx = QAbstractTextDocumentLayout.PaintContext()
        if option.state & QStyle.State_Selected:
            ctx.palette.setColor(
                QPalette.Text,
                option.palette.color(
                    QPalette.Active, QPalette.HighlightedText
                ),
            )
        else:
            ctx.palette.setColor(
                QPalette.Text,
                option.palette.color(QPalette.Active, QPalette.Text),
            )

        textRect = style.subElementRect(QStyle.SE_ItemViewItemText, options)

        if index.column() != 0:
            textRect.adjust(5, 0, 0, 0)

        thefuckyourshitup_constant = 4
        margin = (option.rect.height() - options.fontMetrics.height()) // 2
        margin = margin - thefuckyourshitup_constant
        textRect.setTop(textRect.top() + margin)

        painter.translate(textRect.topLeft())
        painter.setClipRect(textRect.translated(-textRect.topLeft()))
        self.doc.documentLayout().draw(painter, ctx)

        painter.restore()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        giza_list = ['박정수', '김민기', '유현석', '권효중', '설경진', '박형수', '최두선', '유준하', '이완기', '배요한', '이민우']
        keyword_list = ['독점', '판권', 'FDA', '국내최초', '세계최초', '도네페질 패치',
                        '치매', '임상 3상', '긴급', '구글', '아마존', '애플', '빌게이츠', '빌 게이츠', '나스닥',
                        '마이크로소프트', '임박', '문대통령', '대통령', '합병', '게임체인저', '게임 체인저', '변이',
                        '효능확인', '효능 확인', 'WHO', '국산', '핵심', '유일', '실질적', '연합', '동맹',
                        '췌장암', '조현병', '알츠하이머', '급박', '급증', '독과점', '시장 진출', '시장진출', '넷플릭스', '페이스북',
                        '트위터', '구글', '인수합병', 'M&A', '인수', '승인', 'EU', '방한']
        self.keyword_list = giza_list + keyword_list

        self.is_first_table_set = True
        self.MainWindow = MainWindow
        self.MainWindow.setObjectName("NewsCollector")
        self.MainWindow.resize(1800, 1000)
        self.MainWindow.setStyleSheet("color: black;background-color:whitesmoke;")
        self.centralwidget = QWidget(self.MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.tableWidget = QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QRect(600, 0, 600, 970))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.cellDoubleClicked.connect(self.goodTableClicked)
        self.tableWidget.setItemDelegate(HTMLDelegate(self.tableWidget, 'red'))

        self.tableWidget2 = QTableWidget(self.centralwidget)
        self.tableWidget2.setGeometry(QRect(1200, 0, 600, 970))
        self.tableWidget2.setObjectName("tableWidget2")
        self.tableWidget2.cellDoubleClicked.connect(self.badTableClicked)
        self.tableWidget2.setItemDelegate(HTMLDelegate(self.tableWidget2, 'blue'))

        self.tableWidget3 = QTableWidget(self.centralwidget)
        self.tableWidget3.setGeometry(QRect(0, 0, 600, 970))
        self.tableWidget3.setObjectName("tableWidget3")
        self.tableWidget3.cellDoubleClicked.connect(self.allTableClicked)
        self.tableWidget3.setItemDelegate(HTMLDelegate(self.tableWidget3, 'orange'))

        self.MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(self.MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 1105, 26))
        self.menubar.setObjectName("menubar")
        self.MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(self.MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.MainWindow.setStatusBar(self.statusbar)
        self.today_date = str(datetime.datetime.now()).split(' ')[0]
        self.retranslateUi()
        QMetaObject.connectSlotsByName(self.MainWindow)

    def goodTableClicked(self):
        x = self.tableWidget.selectedIndexes()
        url = self.good_df['url'].iloc[x[0].row()]
        webbrowser.open(url)

    def badTableClicked(self):
        x = self.tableWidget2.selectedIndexes()
        url = self.bad_df['url'].iloc[x[0].row()]
        webbrowser.open(url)

    def allTableClicked(self):
        x = self.tableWidget3.selectedIndexes()
        url = self.all_df['url'].iloc[x[0].row()]
        webbrowser.open(url)

    def setTableWidgetData(self, table, df, df_, column_idx_lookup, columns):
        column_headers = df.columns
        table.setColumnCount(columns)
        table.setRowCount(df.shape[0])
        table.setHorizontalHeaderLabels(column_headers)

        for k, v in df_.items():
            col = column_idx_lookup[k]
            for row, val in enumerate(v):
                item = QTableWidgetItem(val)
                if col == 2:
                    item.setTextAlignment(Qt.AlignVCenter | Qt.AlignRight)
                table.setItem(row, col, item)
        if self.is_first_table_set:
            table.resizeColumnsToContents()
            table.horizontalHeader().setStretchLastSection(True)
    def setMaria(self, host='3.37.26.5', user='root', password='sa1234', db='news', charset='utf8'):
        self.connect = pymysql.connect(host=host, user=user, password=password, db=db, charset=charset, port=1889,
                                       connect_timeout=999)
        self.cur = self.connect.cursor()
        return

    def mariaShowData(self, tablename, sql=None):
        try:
            if sql is None:
                self.cur.execute('select * from ' + tablename)
            else:
                self.cur.execute(sql)
            df = self.cur.fetchall()
            field_names = [i[0] for i in self.cur.description]
            df = pd.DataFrame(df, columns=field_names)
            return df
        except Exception as e:
            print(e)
            return None

    def retranslateUi(self):
        self.tableWidget.clear()
        self.tableWidget2.clear()
        self.tableWidget3.clear()

        _translate = QCoreApplication.translate
        self.MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.setMaria()
        self.good_df = self.mariaShowData('data_good_news', sql='select * from data_good_news where time like "{}%" order by lctime desc'.format(self.today_date))[['time', 'GoodNews', 'url']]
        self.good_df.columns = ['time', 'GoodNews', 'url']
        self.good_df['time'] = self.good_df['time'].astype('str')
        self.good_df = self.good_df.sort_values(['time'], ascending=False).reset_index(drop=True)
        df_ = {
            'time': self.good_df['time'],
            'GoodNews': self.good_df['GoodNews']
        }
        column_idx_lookup = {'time': 0, 'GoodNews': 1}
        self.setTableWidgetData(self.tableWidget, self.good_df, df_, column_idx_lookup, 2)

        self.bad_df = self.mariaShowData('data_bad_news', sql='select * from data_bad_news where time like "{}%" order by lctime desc'.format(self.today_date))[['time', 'BadNews', 'url']]
        self.bad_df.columns = ['time', 'BadNews', 'url']
        self.bad_df['time'] = self.bad_df['time'].astype('str')
        self.bad_df = self.bad_df.sort_values(['time'], ascending=False).reset_index(drop=True)
        df_ = {
            'time': self.bad_df['time'],
            'BadNews': self.bad_df['BadNews']
        }
        column_idx_lookup = {'time': 0, 'BadNews': 1}
        self.setTableWidgetData(self.tableWidget2, self.bad_df, df_, column_idx_lookup, 2)

        self.all_df = self.mariaShowData('data_news_real', sql='select * from data_news_real where time like "{}%" order by lctime desc'.format(self.today_date))[['time', 'title', 'url']]
        self.all_df.columns = ['time', 'Title', 'url']
        self.all_df['time'] = self.all_df['time'].astype('str')
        self.all_df = self.all_df.sort_values(['time'], ascending=False).reset_index(drop=True)
        df_ = {
            'time': self.all_df['time'],
            'Title': self.all_df['Title']
        }
        column_idx_lookup = {'time': 0, 'Title': 1}
        self.setTableWidgetData(self.tableWidget3, self.all_df, df_, column_idx_lookup, 2)



        self.tableWidget.horizontalHeader().setStyleSheet("QHeaderView::section {background-color:powderblue;}")
        self.tableWidget2.horizontalHeader().setStyleSheet("QHeaderView::section {background-color:powderblue;}")
        self.tableWidget3.horizontalHeader().setStyleSheet("QHeaderView::section {background-color:powderblue;}")

        self.is_first_table_set = False
        self.findGoodItems()
        self.findBadItems()
        self.findSpecialItems()
        QTimer.singleShot(5000, self.retranslateUi)

    def findGoodItems(self):
        for text in self.keyword_list:
            selected_items = self.tableWidget.findItems(text, Qt.MatchContains)
            for item in selected_items:
                item.setData(Qt.UserRole, text)

    def findBadItems(self):
        for text in self.keyword_list:
            selected_items = self.tableWidget2.findItems(text, Qt.MatchContains)
            for item in selected_items:
                item.setData(Qt.UserRole, text)
    
    def findSpecialItems(self):
        for text in self.keyword_list:
            selected_items = self.tableWidget3.findItems(text, Qt.MatchContains)
            for item in selected_items:
                item.setData(Qt.UserRole, text)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


